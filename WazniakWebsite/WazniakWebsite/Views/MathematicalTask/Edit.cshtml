@model WazniakWebsite.Models.MathematicalTask

@{
    ViewBag.Title = "Edit";
}

@section Meta
{
    <!-- Copyright (c) 2012-2013 The MathJax Consortium -->
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
}

@section HeadScripts
{
    <style>
        #Text, #MathBuffer, #MathPreview, #textOutTitle, #textInTitle {
            width: 100%;
            padding-left: 5px;
            padding-right: 5px;
        }

        #Text {
            background-color: #F7F5FA;
            max-width: 100% !important;
            width: 100% !important;
        }

        #MathBuffer, #MathPreview {
            background-color: #FFCCFF;
        }
    </style>

    <script type="text/javascript">
        $(function () {
            // update the preview
            Preview.Update();

            // set the value of the content
            $("#Text").val("@Model.Text");
            
            var h = $("#Text").height();
            $("#MathPreview").css("min-height", function () {
                return h;
            });
            $("#MathBuffer").css("min-height", function () {
                return h;
            });
        })
    </script>

    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        showProcessingMessages: false,
        tex2jax: {
        inlineMath: [['$','$'],['\\(','\\)']],
        processEscapes: true
        }
        });
    </script>
    <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

    <script>
        var Preview = {
            delay: 150,        // delay after keystroke before updating

            preview: null,     // filled in by Init below
            buffer: null,      // filled in by Init below

            timeout: null,     // store setTimout id
            mjRunning: false,  // true when MathJax is processing
            oldText: null,     // used to check if an update is needed

            //
            //  Get the preview and buffer DIV's
            //
            Init: function () {
                this.preview = document.getElementById("MathPreview");
                this.buffer = document.getElementById("MathBuffer");
            },

            //
            //  Switch the buffer and preview, and display the right one.
            //  (We use visibility:hidden rather than display:none since
            //  the results of running MathJax are more accurate that way.)
            //
            SwapBuffers: function () {
                var buffer = this.preview, preview = this.buffer;
                this.buffer = buffer; this.preview = preview;
                buffer.style.visibility = "hidden"; buffer.style.position = "absolute";
                preview.style.position = ""; preview.style.visibility = "";
            },

            //
            //  This gets called when a key is pressed in the textarea.
            //  We check if there is already a pending update and clear it if so.
            //  Then set up an update to occur after a small delay (so if more keys
            //  are pressed, the update won't occur until after there has been
            //  a pause in the typing).
            //  The callback function is set up below, after the Preview object is set up.
            //
            Update: function () {
                if (this.timeout) { clearTimeout(this.timeout) }
                this.timeout = setTimeout(this.callback, this.delay);
            },

            //
            //  Creates the preview and runs MathJax on it.
            //  If MathJax is already trying to render the code, return
            //  If the text hasn't changed, return
            //  Otherwise, indicate that MathJax is running, and start the
            //  typesetting.  After it is done, call PreviewDone.
            //
            CreatePreview: function () {
                Preview.timeout = null;
                if (this.mjRunning) return;
                var text = document.getElementById("Text").value;
                if (text === this.oldtext) return;
                this.buffer.innerHTML = this.oldtext = text;
                this.mjRunning = true;
                MathJax.Hub.Queue(
                    ["Typeset", MathJax.Hub, this.buffer],
                    ["PreviewDone", this]
                );
            },

            //
            //  Indicate that MathJax is no longer running,
            //  and swap the buffers to show the results.
            //
            PreviewDone: function () {
                this.mjRunning = false;
                this.SwapBuffers();
            }

        };

        //
        //  Cache a callback to the CreatePreview action
        //
        Preview.callback = MathJax.Callback(["CreatePreview", Preview]);
        Preview.callback.autoReset = true;  // make sure it can run more than once
    </script>
}


<h2 class="PurpleText">Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4 class="PurpleText">Change the content of an exercise</h4>
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2 PurpleText" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Title, new { @class = "form-control text-box" })
                @Html.ValidationMessageFor(model => model.Title)
            </div>
        </div>

        <br />
        <h5 id="description" class="col-md-10 col-md-offset-2 PurpleText">
            <b>
                Change the content of the exercise in field below. Remember that if you want to insert a mathematical expression
                simply type sign \$ (or \$\$ if you want the expression to be placed in the next line), then write the expression
                in LaTeX syntax and finish it with another \$ (\$\$). The preview of the text that you are typing will be dynamically
                displayed in the box bellow.
            </b>
        </h5>
        
        <div class="form-group">
            <label class="control-label col-md-2 PurpleText" for="Text">Content</label>
            <div class="col-md-10">
                <textarea class="text-box form-control" id="Text" name="Text" rows="8" onkeyup="Preview.Update()"></textarea>
                <span class="field-validation-valid" data-valmsg-for="Text" data-valmsg-replace="true"></span>
            </div>
        </div>
        
        <div class="form-group">
            <label class="control-label col-md-2 PurpleText" for="Text">Preview</label>
            <div class="col-md-10">
                <div id="MathPreview" class="well-large alert lightPurpleBackground"></div>
                <div id="MathBuffer" class="well-large alert lightPurpleBackground" style="visibility:hidden; position:absolute; top:0; left: 0"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save changes" class="btn PurpleBtn" />
            </div>
        </div>
    </div>
    
    <script>
        Preview.Init();
    </script>
}

<hr />
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
